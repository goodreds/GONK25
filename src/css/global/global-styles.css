/*
  Global styles

  Low-specificity, global styles that apply to the whole
  project: https://cube.fyi/css.html
*/

body {
  background: var(--color-dark);
  color: var(--color-primary);
  font-size: var(--size-step-1);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
  font-size-adjust: from-font;
  margin: 0;
}

:is(h1, h2, h3, h4) {
  line-height: var(--leading-fine);
  text-wrap: balance;
}

h1 {
  font-size: var(--size-step-6);
  max-width: 20ch;
}

h2 {
  font-size: var(--size-step-5);
  max-width: 35ch;
}

h3 {
  font-size: var(--size-step-4);
  max-width: 35ch;
}

/*
  What we’re doing here is, determining if a heading has either a text-step-10, text-step-11 or text-step-12 utility class on it. This is achieved by using the [*=""] attribute selector, which determines if an attribute contains the string we put between the quotes.

  All three of those are inside a :where() pseudo-class. The reason we use :where() instead of :is(), is because :where() has zero specificity. It’s a global style, so we want this to be easily overridable in CUBE blocks for example.
*/
:is(h1, h2, h3, h4):where(
  [class*='text-step-10'],
  [class*='text-step-11'],
  [class*='text-step-12']
) {
  line-height: var(--leading-micro);
  font-weight: var(--font-black);
}

:is(h4, h5, h6) {
  font-size: var(--size-step-3);
}

small {
  font-size: var(--size-step-0);
}

ins {
  text-decoration: none;
  background: var(--color-primary);
  color: var(--color-dark);
  padding-inline: 0.3em;
}

:is(code, kbd, samp) {
  /* The reason this isn't var(--font-mono) is so the stroke on kbd inherits the colour from the text as --font-mono uses mid shade by default  */
  font-family: monospace;
  padding: 0.2em 0.2em 0.05em 0.2em;
  hyphens: none;
  tab-size: 2;
  text-align: left;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  box-decoration-break: clone;
}

/* This is uite a new property, so we want code styles to at least not be huge or tiny */
@supports not (font-size-adjust: from-font) {
  :is(code, kbd, samp) {
    font-size: 0.8em;
  }
}

pre:has(code) {
  width: max-content;
  max-width: 100%;
  overflow-x: auto;
}

pre code {
  border: none;
  background: none;
  padding: 0;
}

kbd {
  border: 1px solid;
  padding-block-end: 0.1em;
}

var {
  font-style: normal;
  font-weight: var(--font-medium);
}

q {
  font-style: italic;
}

ul:not([class]) {
  padding-inline-start: 1.7ch;
  list-style-type: disc;
}

ul:not([class])>li {
  padding-inline-start: var(--space-xs);
}

ul ::marker {
  font-size: 0.8lh;
}

ol ::marker {
  font-size: 1em;
  font-weight: var(--font-bold);
}

/* Lists with classes and roles will be out of standard flow, so remove the default spacing */
[role='list'][class],
[role='tablist'][class] {
  margin-block: 0;
  padding: 0;
}

dt {
  font-weight: var(--font-medium);
}

dt+dd {
  margin-block-start: var(--space-xs);
}

dd+dt {
  margin-block-start: var(--space-s);
}

dd {
  margin-inline-start: 1.5ch;
}

blockquote {
  margin-inline: 0;
  color: var(--color-light);
}

blockquote footer {
  margin-block-start: var(--space-s);
  color: var(--color-primary);
  font-size: var(--size-step-0);
}

blockquote q {
  font-style: normal;
}

/* some nice default styles for embeds a YouTube of Vimeo video, or uses a native <video> element */
:is(video, iframe[src*='youtube'], iframe[src*='vimeo']) {
  display: block;
  width: 100%;
  height: auto;
  aspect-ratio: 16/9;
}

img {
  height: auto;
  max-width: 100%;
  /* Adding display: block gets rid of that annoying space at the bottom that shows up otherwise. */
  display: block;
}

/* a touch of padding and some typography treatment for the figcaption */
figcaption {
  padding-block-start: 0.5em;
  font-size: var(--size-step-0);
  font-family: monospace;
}

table {
  border: var(--stroke);
  border-collapse: collapse;
  width: 100%;
}

th {
  text-align: left;
  font-weight: var(--font-bold);
  line-height: var(--leading-fine);
}

thead th {
  padding-block: var(--space-s);
}

td,
th {
  padding: var(--space-xs) var(--space-s);
}

th:not(:only-of-type) {
  border-block-end: var(--stroke);
}

th:only-of-type {
  border-inline-end: var(--stroke);
}

:is(th, td)~ :is(th, td) {
  border-inline-start: var(--stroke);
}

tr+tr :is(th, td) {
  border-block-start: var(--stroke);
}

caption {
  caption-side: bottom;
  margin-block-start: var(--space-s);
}

a:not([class]):hover {
  text-underline-offset: 0.2lh;
}

:is(h1, h2, h3, h4) a:not([class]) {
  text-decoration-thickness: 0.1ex;
  text-underline-offset: 0.2ex;
}

:is(h1, h2, h3, h4) a:not([class]):hover {
  text-underline-offset: 0.3ex;
}

:focus {
  outline: none;
}

:focus-visible {
  outline: 2px solid var(--focus-color, currentColor);
  outline-offset: var(--focus-offset, 0.2lh);
}

/* Firefox is the only browser that doesn't outline the whole element unless you make it display inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset */
@supports (-moz-appearance: none) {
  :root {
    --focus-offset: 0.08em;
  }
}

:target {
  scroll-margin-block: 5lh;
}

::selection {
  color: var(--color-dark);
  background: var(--color-light);
}

hr {
  /* Remove borders */
  border: none;
  /* Define top border using stroke var */
  border-block-start: var(--hr-stroke), var(--stroke);
  /* Look for flow-space, and fallback to a spacing design token */
  margin-block: var(--flow-space, var(--space-xl));
}

/* Ensure svg without width and height attributes isn't massive */
svg:not([class]) {
  width: auto;
  height: 1lh;
}

/* Tell all svgs not to shrink - flex:none also works but slex-shrink: 0 is easier to understand */
svg {
  flex-shrink: 0;
}

/* An svg with a role of img is treated as an image. We allow the width and height to take over - we know they're there due to checking for their presence. */
svg[role='img'][width][height] {
  width: revert;
  height: revert;
  background: var(--color-light);
  padding: var(--space-xs);
}

/* There's a.flow composition, but this prevents forms from having to have that applied where the markup is harder to control in certain systems. It still uses the --flow-space vars though to make managing space easier */
form>*+* {
  margin-top: var(--flow-space, 1rem);
}

:is(input, select, textarea) {
  accent-color: var(--color-primary);
}

:is(input:not([type='checkbox'], [type='radio'], [type='color']), select, textarea) {
  /* We're using em units for padding here rather than the spacing scale - allowing the padding to scale with the text */
  padding: 0.5em 0.8em;
  border-radius: var(--radius-s);
  border: var(--stroke-solid);
  background: var(--color-dark-glare);
  color: var(--color-light);
  /* 100% width to force inputs to fill their container which allows a compositional layout to determine the size instead. */
  width: 100%;

  /* CSS nesting here - use nesting sparingly, just for little flourishes like this, to reduce confusion when intepreting the code. */
  &::placeholder {
    color: var(--color-mid);
    /* For some reason, Firefox adds opacity to placeholders */
    opacity: 1;
  }
}

/* Set heavier weight and finer leading for the form labels */
label {
  line-height: var(--leading-fine);
  font-weight: var(--font-medium);
}

/* Add an inline element via the ::after rule that creates a new line */
label::after {
  content: '\A';
  white-space: pre;
}

/* Usually the label wraps the checkbox and radio buttons, so we give ourselves more layout and text-flow control with flex:
  - Align to baseline aligns the control to the first line of text - so if the text wraps across multiple lines, the control doesn't end up being spaced awkwardly in the center.
*/
label:has(input) {
  display: flex;
  align-items: baseline;
  gap: var(--space-s);
  font-weight: var(--font-normal);
}

label:has(input)+label:has(iniput) {
  --flow-space: var(--space-s-m);
}

/* Optical adjustement - Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
  transform: translateY(0.1ex);
}

/* Apply some treatment to disabled inputs */
input:disabled {
  background: var(--color-mid);
}

/* Visual hint that the element is disabled */
input:disabled,
label input:disabled {
  cursor: not-allowed;
}

/* On a <textarea>you can define rows which add height. Without that attribute,
they’re quite shallow. With a little :not() rule, we can detect those that are shallow and make them taller. */
textarea:not([rows]) {
  min-height: 10em;
}

/* Makes the <fieldset>and <legend>elements look nicer because they don’t look great by default. */
fieldset {
  border: var(--stroke);
  padding: var(--space-s);
}

legend {
  font-weight: var(--font-medium);
  padding-inline: var(--space-xs);
}

/* Tidy up the <details> and <summary> elements */
summary {
  font-weight: var(--font-bold);
  cursor: pointer;
}

details[open] summary {
  margin-block-end: var(--space-s);
}

/* Adding support for smooth transitions as per:
  https://htmhell.dev/adventcalendar/2024/3/
  Supported in Chrome and Safari TP as of 3/12/24
*/
@view-transition {
  navigation: auto;
}

/* Turn off the smooth transitions for those users who prefer-reduced-motion */
@media (prefers-reduced-motion: reduce) {
  @view-transition {
    navigation: none;
  }
}
